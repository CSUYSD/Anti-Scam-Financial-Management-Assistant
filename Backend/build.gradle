plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

jacoco {
	toolVersion = "0.8.8"  // 确保使用 JaCoCo 的最新版本
}

test {
	useJUnitPlatform()
	jvmArgs '-Dfile.encoding=UTF-8'
	finalizedBy jacocoTestReport
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "full"
	}
}

// JaCoCo 报告配置
jacocoTestReport {
	dependsOn test
	reports {
		html.required = true
		xml.required = true
		csv.required = truegin
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					// 排除所有模型类
					"com/example/demo/model/**",
					"com/example/demo/model/dto/**",
					"com/example/demo/model/redis/**",
					// 排除配置类
					"com/example/demo/config/**",
					// 排除常量类
					"com/example/demo/constant/**",
					// 排除异常类
					"com/example/demo/exception/**",
					// 排除启动类
					"**/DemoApplication*",
					// 排除工具类（可选）
					// "com/example/demo/utility/**"
			])
		}))
	}
}

// 覆盖率验证规则
jacocoTestCoverageVerification {
	dependsOn jacocoTestReport

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/example/demo/model/**",
					"com/example/demo/model/dto/**",
					"com/example/demo/model/redis/**",
					"com/example/demo/config/**",
					"com/example/demo/constant/**",
					"com/example/demo/exception/**",
					"**/DemoApplication*"
			])
		}))
	}

	violationRules {
		rule {
			limit {
				minimum = 0.80
			}
		}
	}
}

// 编码设置
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.compilerArgs += ['-parameters']
}

test.finalizedBy jacocoTestCoverageVerification  // 在测试后检查覆盖率是否达标

//snapshot version support
repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

compileJava {
	options.compilerArgs += ['-parameters']
}

ext {
	set('springAiVersion', "1.0.0-M2")
}

configurations {
	all {
		exclude group: 'com.vaadin.external.google', module: 'android-json'
	}
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.opencsv:opencsv:5.5.2'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	// Jackson
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'com.fasterxml.jackson.core:jackson-annotations'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.2'
	implementation 'com.mysql:mysql-connector-j'
	// H2 Database
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	compileOnly 'org.projectlombok:lombok:1.18.34'
	annotationProcessor 'org.projectlombok:lombok:1.18.34'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.google.truth:truth:1.1.5'
	testImplementation 'org.mockito:mockito-core:4.5.1'
	// Spring Boot DevTools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.apache.commons:commons-pool2:2.11.1' // 添加 commons-pool2 依赖
	// elastic search
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
	// Spring AI
	implementation platform("org.springframework.ai:spring-ai-bom:1.0.0-SNAPSHOT")
	implementation 'org.springframework.ai:spring-ai-tika-document-reader'
	// OpenAI
	implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'
	// Chroma Vector DB
	implementation 'org.springframework.ai:spring-ai-chroma-store-spring-boot-starter'
	// MQ
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	//Websocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	// AWS S3
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.529'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
	}
}



tasks.named('test') {
	useJUnitPlatform()
	jvmArgs '-Dfile.encoding=UTF-8'
}
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}
tasks.withType(Test) {
	jvmArgs '-Dfile.encoding=UTF-8'
}

